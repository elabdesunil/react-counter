{"version":3,"sources":["Greeting.js","App.js","serviceWorker.js","index.js"],"names":["Greeting","props","react_default","a","createElement","name","value","Counter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","increment","setState","counter","state","togCount","decrement","reset","toggle","tog","console","log","className","type","onClick","src_Greeting","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAWeA,EATE,SAACC,GACd,OAEAC,EAAAC,EAAAC,cAAA,kBACWH,EAAMI,KADjB,IACwBJ,EAAMK,MAD9B,gDCyDWC,cAxDb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAQFI,UAAW,WACTP,EAAKQ,SAAS,CACZC,QAAST,EAAKU,MAAMD,QAAUT,EAAKU,MAAMC,YAXhCX,EAebY,UAAY,SAACD,GAERX,EAAKU,MAAMD,QAAU,GACxBT,EAAKQ,SAAS,CACZC,QAAST,EAAKU,MAAMD,QAAST,EAAKU,MAAMC,YAnB/BX,EAuBfa,MAAQ,WACNb,EAAKQ,SAAS,CACZC,QAAS,KAzBET,EA4Bbc,OAAS,WAEPd,EAAKQ,SAAS,CACZG,SAAmC,IAAxBX,EAAKU,MAAMC,SAAkB,EAAI,EAC5CI,IAAyB,iBAAnBf,EAAKU,MAAMK,IAA0B,eAAgB,kBA9B7Df,EAAKU,MAAQ,CACXD,QAAS,EACTM,IAAI,eACJJ,SAAU,GALDX,wEAsCX,OADAgB,QAAQC,IAAI,yBAA0Bd,KAAKO,MAAMD,SAEjDf,EAAAC,EAAAC,cAAA,OAAKsB,UAAW,aACdxB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,UAAf,cACAxB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,WACfxB,EAAAC,EAAAC,cAAA,cAAOO,KAAKO,MAAMD,QAAlB,KAEAf,EAAAC,EAAAC,cAAA,UAAQuB,KAAK,SAASC,QAASjB,KAAKU,OAApC,SACAnB,EAAAC,EAAAC,cAAA,UAAQuB,KAAK,SAASC,QAAUjB,KAAKI,UAAWW,UAAU,WAA1D,aACAxB,EAAAC,EAAAC,cAAA,UAAQuB,KAAK,SAASC,QAAWjB,KAAKS,UAAWM,UAAU,WAA3D,aACAxB,EAAAC,EAAAC,cAAA,UAAQuB,KAAK,SAASC,QAAUjB,KAAKW,OAAQI,UAAW,WAAWf,KAAKO,MAAMK,KAC9ErB,EAAAC,EAAAC,cAACyB,EAAD,CAAUxB,KAAK,aAAaC,MAAOK,KAAKO,MAAMD,mBAjD9Ba,aCOFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8ed96b29.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Greeting = (props) => {\r\n    return (\r\n    \r\n    <p> \r\n        Hello {props.name} {props.value}! This is the greeting that I have for now.\r\n    </p>\r\n    );\r\n}\r\n\r\nexport default Greeting;\r\n","import React, {Component} from 'react';\r\nimport './index.css';\r\nimport Greeting from './Greeting';\r\n\r\n\r\nclass Counter extends Component{\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      counter: 0,\r\n      tog:'Single Count',\r\n      togCount: 1\r\n    }\r\n  }\r\n\r\n  increment =() =>{\r\n    this.setState({\r\n      counter: this.state.counter + this.state.togCount\r\n    })\r\n  }\r\n\r\n  decrement = (togCount) =>{\r\n    \r\n    if(this.state.counter > 0){\r\n    this.setState({\r\n      counter: this.state.counter- this.state.togCount\r\n    })\r\n  }\r\n  }\r\nreset = () =>{\r\n  this.setState({\r\n    counter: 0\r\n  })\r\n}\r\n  toggle = () =>{\r\n\r\n    this.setState({\r\n      togCount: (this.state.togCount === 1) ? 2 : 1,\r\n      tog: (this.state.tog === 'Single Count') ? 'Double Count' :'Single Count',\r\n    })\r\n    \r\n  }\r\n  render(){\r\n    console.log(\"this is line number 13\", this.state.counter);\r\n    return(\r\n    <div className =\"container\">\r\n      <div className=\"navbar\">Counter.JS</div>\r\n      <div className=\"counter\">\r\n      <h1 > {this.state.counter} </h1>\r\n     \r\n      <button type=\"button\" onClick={this.reset}>Reset</button>\r\n      <button type=\"button\" onClick= {this.increment} className=\"buttons\">Increment</button>\r\n      <button type=\"button\" onClick = {this.decrement} className=\"buttons\">Decrement</button>\r\n      <button type=\"button\" onClick ={this.toggle} className =\"buttons\">{this.state.tog}</button>\r\n      <Greeting name=\"React User\" value={this.state.counter}/>\r\n      </div>\r\n    </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Counter;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}